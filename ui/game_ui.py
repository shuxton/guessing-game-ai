import streamlit as st
from logic.game import Game, GameState


class GameUi():
    def __init__(self) -> None:
        self.generate_hint = True
        self.hint = ""

    def render(self,title="The Guessing Game",layout="wide"):
        st.set_page_config(layout=layout)
        st.title(title)
        self._initialize_session()
        g: Game = st.session_state.game_instance
        
        col1, col2 = st.columns([1, 3])

        with col1: #left column
            self._manage_categories_and_questions(g)

        with col2: #right column
            self._display_chat_interface(g)

    def _initialize_session(self):
        if "game_instance" not in st.session_state:
            st.session_state.game_instance = Game()
        if "game_state" not in st.session_state:
            st.session_state.game_state = GameState.START
        if "game_statistics" not in st.session_state:
            st.session_state.game_statistics  = []
        if "messages" not in st.session_state:
            st.session_state.messages = []

    def _update_session(self,g:Game,reset_messages=True):
        st.session_state.game_instance = g
        st.session_state.game_state = g.state
        st.session_state.messages = [] if reset_messages else st.session_state.messages
        for i, stats in enumerate(st.session_state.game_statistics):
            if stats.game_number == g.game_stats.game_number:
                st.session_state.game_statistics[i] = g.game_stats
                break
        else:
            st.session_state.game_statistics.append(g.game_stats)

    #Displays hint generated by chat-gpt 
    def _generate_hint(self,g:Game):
        if g.state is GameState.PLAYING and self.generate_hint:
                self.generate_hint = False
                self.hint = g.generate_hint()

    def _manage_categories_and_questions(self,g:Game):
        with st.chat_message("ai"):
            st.write("Hello I am Ola. Let's play a game!")

            if st.session_state.game_state is GameState.START:
                self._create_categories(g)

            if st.session_state.game_state is GameState.PLAYING:
                self._create_pills(g)

            if st.session_state.game_state is GameState.END:
                self._create_reset(g)

    def _create_categories(self, g):
        category = st.pills("Choose a category", options=g.fetch_categories())
        if category:
            is_success = g.set_category(category)
            if is_success:
                st.session_state.game_state = GameState.PLAYING
                g.generate_question() 
                st.rerun()

    def _create_reset(self, g:Game):
        st.button("Reset",on_click=self._on_reset,args=[g])

    def _on_reset(self,g:Game):
        g.reset()
        self.generate_hint = True
        self._update_session(g)
    #End Game UI

    #Begin Chat Interface
    def _display_chat_interface(self, g:Game):
        with st.container(height=600):
            self._change_chatbot_style()

            for message in st.session_state.messages:
                with st.chat_message(message["role"]):
                    st.markdown(message["content"]) 

            if g.state is GameState.PLAYING:
                with st.chat_message("ai"):
                    self._generate_hint(g)
                    st.markdown(f'''Hint{g.game_stats.hint_count} - {self.hint} ''')
                    st.markdown('''If you need another hint, type - Ola <your question> ''') 

            if prompt := st.chat_input("Let's play!"):
                self._create_chat(g, "user", prompt)
                self._create_chat(g, "ai", prompt, True)
                self._update_session(g,reset_messages=False)
                st.rerun()

    def _create_chat(self,g:Game,role, prompt,use_prompt_handler=False):
        msg=prompt
        with st.chat_message(role):
            if use_prompt_handler: 
                msg,self.generate_hint = g.prompt_handler(prompt)
                st.markdown(msg)
            else:
                st.markdown(msg)
            st.session_state.messages.append({"role": role, "content": msg})

    def _change_chatbot_style(self):
        st.markdown(f"""
        <style>
            .stChatInput {{
            position: fixed;
            bottom: 3rem;
            }}
        </style>
        """, unsafe_allow_html=True)
    # End Chat UI


    def _create_pills(self,g:Game):

        st.markdown(
            """
            <style>
            .pill {
                padding: 8px 12px;
                border-radius: 20px;
                font-size: 14px;
                font-weight: bold;
                color: white;
            }
            .pill.numeric {
                background-color: #007BFF; /* Bright blue for numeric values */
            }
            .pill.text {
                background-color: #FF4500; /* Red for non-numeric values */
            }
            </style>
            """,
            unsafe_allow_html=True,
        )

        if st.session_state.game_state is GameState.PLAYING:
            pills_html = '<div class="pill-container">'
            for word in g.guessed_word:
                if str(word).isnumeric():
                    pills_html += f'<span class="pill numeric">{word}</span>'
                else:
                    pills_html += f'<span class="pill text">{word}</span>'
            pills_html += '</div>'

            st.markdown(pills_html, unsafe_allow_html=True)

